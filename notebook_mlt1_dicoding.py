# -*- coding: utf-8 -*-
"""notebook MLT1 Dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXPg1Ix9l57tGt90HgzZQhA-JPHJtyce

## Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, GRU, Dropout, Dense, Input
from tensorflow.keras.callbacks import EarlyStopping

"""## Data Loading"""

df = pd.read_csv('daily.csv')
df.head()

"""## Data Preprocessing

### Setup index with a date
"""

df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

df.info()

"""### Handling Nan Values

mengecek nilai kosong
"""

df.isna().sum()

df.dropna(subset=['Price'], inplace=True)

"""## EDA"""

df.describe()

plt.figure(figsize=(15, 6))
plt.plot(df['Price'], color='teal', linewidth=2)
plt.title('Harga Gas Alam dari Waktu ke Waktu', fontsize=16)
plt.xlabel('Tanggal')
plt.ylabel('Harga (USD per MMBtu)')
plt.grid(True)

ax = plt.gca()

# Locator untuk tahun tiap 5 tahun, tapi cuma di bulan Desember
# Jadi pakai YearLocator(interval=5), lalu filter yang bulan Desember
# Untuk memastikan ticknya di Desember, kita bisa pakai YearLocator dan manual set bulan ke Des
ax.xaxis.set_major_locator(mdates.YearLocator(base=3, month=1, day=1))

# Format label "Dec 2000", "Dec 2005", ...
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.tight_layout()
plt.show()

"""## Standarisasi data"""

scaler = MinMaxScaler()
scaled_prices = scaler.fit_transform(df)
print('Shape of the scaled data matrix: ', scaled_prices.shape)

np.isnan(scaled_prices).sum()

"""## Split train-test data

dalam notebook ini, akan digunakan window input dengan sequence length sepanjang 60 hari kebelakang
"""

def create_sequences(data, window_size):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size])
    return np.array(X), np.array(y)

window_size = 60  # 60 hari ke belakang
X, y = create_sequences(scaled_prices, window_size)

"""kemudian akan dilakukan penggecekan apakah ada nilai Nan atau infinite"""

print(np.isnan(X).sum(), np.isnan(y).sum())
print(np.isinf(X).sum(), np.isinf(y).sum())

"""dan hasilnya tidak ada. Selanjutnya akan dilakukan split data dengan perbandingan 80:20"""

split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

X_train.shape  # hasil: (jumlah_sample, 60, 1)

X_test.shape

"""## Modelling LSTM

model dibentuk dengan evaluasi berbasis RMSE, MSE, dan MAE
"""

def rmse(y_true, y_pred):
    return K.sqrt(K.mean(K.square(y_pred - y_true)))

model_lstm = Sequential([
    Input(shape=(window_size, 1)),
    LSTM(64, activation='tanh', return_sequences=False),
    Dense(1)
])
model_lstm.compile(optimizer='adam', loss='mse', metrics=['mse', rmse, 'mae'])
model_lstm.summary()

"""diterapkan Early Stop mencegah model tidak overfitting saat berlatih sebagai berikut"""

# Callback: EarlyStopping
early_stop = EarlyStopping(
    monitor='val_loss',       # perhatikan loss pada data validasi
    patience=10,              # tunggu 10 epoch jika tidak membaik
    restore_best_weights=True
)

# Training dengan validation_split dan early stopping
history_lstm = model_lstm.fit(
    X_train, y_train,
    epochs=100,              # disetel cukup tinggi, early stopping akan berhenti otomatis
    batch_size=32,
    validation_split=0.1,    # 10% data training dipakai untuk validasi
    callbacks=[early_stop],
    verbose=1
)

"""## Evaluasi Model"""

# Evaluasi model pada data test
test_loss, test_mse, test_rmse, test_mae = model_lstm.evaluate(X_test, y_test, verbose=1)

print("=== Evaluasi Model pada Data Test ===")
print(f"Test Loss (MSE): {test_loss:.4f}")
print(f"Test MSE       : {test_mse:.4f}")
print(f"Test RMSE      : {test_rmse:.4f}")
print(f"Test MAE       : {test_mae:.4f}")

y_pred = model_lstm.predict(X_test)
y_pred_inv = scaler.inverse_transform(y_pred)
y_test_inv = scaler.inverse_transform(y_test)

plt.figure(figsize=(14, 6))
plt.plot(y_test_inv, label='Actual')
plt.plot(y_pred_inv, label='Predicted', color='red')
plt.title('Prediksi Harga Gas Alam dengan LSTM')
plt.legend()
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Misal:
# y_train_inv: hasil inverse transform dari y_train
# y_pred_inv: hasil inverse transform dari prediksi y_test
# y_test_inv: hasil inverse transform dari y_test
y_train_inv = scaler.inverse_transform(y_train)

# Buat array kosong sepanjang total data
train_size = len(y_train_inv)
test_size = len(y_test_inv)
total_size = train_size + test_size

# Buat array untuk menyimpan hasil prediksi dalam urutan penuh
full_pred = np.empty((total_size,))
full_pred[:] = np.nan  # isi dengan NaN dulu
full_pred[train_size:] = y_pred_inv.flatten()  # isi hasil prediksi di bagian test

# Gabungkan y_train dan y_test untuk actual (aktual keseluruhan)
full_actual = np.concatenate((y_train_inv.flatten(), y_test_inv.flatten()))

# Plot
plt.figure(figsize=(15, 6))
plt.plot(full_actual, label='Actual')          # Garis aktual dari awal sampai akhir
plt.plot(full_pred, label='Predicted', color='red')  # Prediksi hanya di bagian test
plt.title('Prediksi Harga Gas Alam (Train + Test)')
plt.xlabel('Index Waktu')
plt.ylabel('Harga')
plt.legend()
plt.grid(True)
plt.show()

"""## Forecasting ke depan s.d Januari 2028"""

import matplotlib.dates as mdates
import numpy as np
import matplotlib.pyplot as plt

# Pastikan y_train_inv, y_test_inv, y_pred_inv adalah array 1D (gunakan .flatten() jika perlu)

# Gabungkan data aktual
full_actual = np.concatenate((y_train_inv.flatten(), y_test_inv.flatten()))

# Buat array prediksi yang align dengan test saja
full_pred = np.empty_like(full_actual)
full_pred[:] = np.nan
full_pred[len(y_train_inv):] = y_pred_inv.flatten()

# Ambil index waktu dari df
# Pastikan panjangnya cocok dengan full_actual
date_index = df.index[-len(full_actual):]  # Ambil bagian akhir yang cocok panjangnya

# Plot
plt.figure(figsize=(15, 6))
plt.plot(date_index, full_actual, label='Actual', color='teal', linewidth=2)
plt.plot(date_index, full_pred, label='Predicted', color='red', linestyle='--')

plt.title('Harga Gas Alam: Aktual vs Prediksi (LSTM)', fontsize=16)
plt.xlabel('Tanggal')
plt.ylabel('Harga (USD per MMBtu)')
plt.grid(True)
plt.legend()

# Format tanggal (tiap 3 tahun, misalnya Januari)
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator(base=3, month=1, day=1))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.tight_layout()
plt.show()

# Jumlah bulan ke depan untuk diprediksi
n_future = 36

# Ambil window terakhir dari X_test
last_window = X_test[-1].reshape(window_size, 1)  # Pastikan bentuknya (60, 1)

future_predictions = []

for _ in range(n_future):
    # Prediksi 1 langkah ke depan
    next_pred = model_lstm.predict(last_window.reshape(1, window_size, 1), verbose=0)
    future_predictions.append(next_pred[0, 0])

    # Update window: geser 1 ke kiri dan tambahkan prediksi
    last_window = np.append(last_window[1:], [[next_pred[0, 0]]], axis=0)

# Inverse transform ke skala asli
future_predictions_inv = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

# Buat index tanggal masa depan
last_date = df.index[-1]
future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=n_future, freq='MS')

# Buat DataFrame hasil prediksi
forecast_df = pd.DataFrame(future_predictions_inv, index=future_dates, columns=['Forecast'])

# Plot hasil prediksi masa depan
plt.figure(figsize=(15, 6))
plt.plot(df.index, df['Price'], label='Data Historis', linewidth=2, color='teal')
plt.plot(date_index, full_pred, label='Predicted', color='red')
plt.plot(forecast_df.index, forecast_df['Forecast'], label='Forecast ke Depan', linestyle='--', color='red')

plt.title('Prediksi Harga Gas Alam dengan LSTM sampai Januari 2028 (Forecasting)')
plt.xlabel('Tanggal')
plt.ylabel('Harga')
plt.legend()
plt.grid(True)

# Format tanggal
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator(base=3, month=1))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
plt.tight_layout()
plt.show()

forecast_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted Price': future_predictions_inv.flatten()
})
forecast_df.set_index('Date', inplace=True)

"""## Inference Prediksi"""

forecast_df[-1:]

forecast_df.loc['2027-06-01']

forecast_df.loc['2026-06-01']

"""dengan model LSTM diprediksikan bahwa pada 06 Januari 2028, harga gas alam di level 3.32 USD/MMBtu."""